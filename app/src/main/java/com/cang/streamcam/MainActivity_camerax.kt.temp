package com.cang.streamcam

import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.ImageFormat
import android.hardware.camera2.CameraCharacteristics
import android.hardware.camera2.CameraMetadata
import android.hardware.camera2.CaptureRequest
import android.hardware.display.DisplayManager
import android.os.Build
import android.os.Bundle
import android.os.StrictMode
import android.util.Log
import android.util.Range
import android.view.Surface
import android.view.WindowManager
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.camera2.interop.Camera2CameraInfo
import androidx.camera.camera2.interop.Camera2Interop
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.video.Recorder
import androidx.camera.video.Recording
import androidx.camera.video.VideoCapture
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.cang.streamcam.Utils.BitmapUtils
import com.cang.streamcam.Utils.NetUtils
import com.cang.streamcam.databinding.ActivityMainBinding
import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException
import java.net.*
import java.nio.ByteBuffer
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

//typealias LumaListener = (luma: Double) -> Unit
typealias StreamListener = (success: Boolean, jpgbytes: ByteArray) -> Unit


class MainActivity_camerax : AppCompatActivity() {
    private lateinit var viewBinding: ActivityMainBinding

    private var currentCamera: Camera? = null
    private var currentLinearZoom: Float = 0f
    private var imageCapture: ImageCapture? = null
    private var videoCapture: VideoCapture<Recorder>? = null
    private var recording: Recording? = null
    private var isShowingPreview = false

    private lateinit var cameraExecutor: ExecutorService

    // Used to bind the lifecycle of cameras to the lifecycle owner
    private lateinit var cameraProvider: ProcessCameraProvider
    private lateinit var cameraSelector: CameraSelector
    private lateinit var imagePreview: Preview
    private lateinit var imageAnalyzer: ImageAnalysis

    private var startCountFrameMillSecs = System.currentTimeMillis()
    private var numOfFrames = 0


    private val displayManager by lazy {
        this.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager
    }

    private lateinit var connectionHandler: ConnectionHandler

    @SuppressLint("MissingSuperCall")
    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults:
        IntArray
    ) {
        //super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                Toast.makeText(
                    this,
                    "Permissions not granted by the user.",
                    Toast.LENGTH_SHORT
                ).show()
                finish()
            }
        }
    }

    /**
     * We need a display listener for orientation changes that do not trigger a configuration
     * change, for example if we choose to override config change in manifest or for 180-degree
     * orientation changes.
     */
    private val displayListener = object : DisplayManager.DisplayListener {
        override fun onDisplayAdded(displayid: Int) = Unit
        override fun onDisplayRemoved(displayid: Int) = Unit
        override fun onDisplayChanged(displayid: Int) = Unit
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewBinding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(viewBinding.root)
        // keep screen always on
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

        // Every time the orientation of device changes, update rotation for use cases
        displayManager.registerDisplayListener(displayListener, null)
        connectionHandler = ConnectionHandler()
        connectionHandler.createSockets()

        restartCamera()

        // Set up the listeners for take photo and video capture buttons
        viewBinding.imageCaptureButton.setOnClickListener { takePhoto() }
        viewBinding.videoCaptureButton.setOnClickListener { captureVideo() }
        viewBinding.showPreviewButton.setOnClickListener { showPreview() }
        viewBinding.fpsTextview.setText("fps");
        viewBinding.switchCameraButton.setOnClickListener { switchCamera() }
        viewBinding.switchZoomButton.setOnClickListener { switchZoom() }

        //// --- PERFORMANCE WHEN CHANGING THIS ?????? ----- /////
        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun switchZoom() {
        if(currentLinearZoom == 0.0f){
            currentLinearZoom = 0.5f
        }else if (currentLinearZoom == 0.5f){
            currentLinearZoom = 1.0f
        }else currentLinearZoom= 0.0f

        rebindCameraUseCases()
    }

    private fun restartCamera() {
        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun takePhoto() {}

    private fun captureVideo() {}

    @SuppressLint("UnsafeOptInUsageError")
    private fun switchCamera() {
        //println("fun switchCamera : ")
        if (currentCamera != null) {
            Log.d(
                TAG, "fun switchCamera : Current camera id : " + currentCamera?.let {
                    Camera2CameraInfo.from(it.cameraInfo).cameraId
                }
            )
            // CAMERA X provides only logical cameras.
            // Most phones (all ?) have one (logical) on the back and one on the front
            // with ids "0" and "1"

            val allCam2Infos = cameraProvider.availableCameraInfos
            println("fun switchCamera : allCam2Infos.size = " + allCam2Infos.size)
            /*
            var nextCameraId = Camera2CameraInfo.from(currentCamera!!.cameraInfo).cameraId
            for (i in allCam2Infos.indices) {
                if (Camera2CameraInfo.from(currentCamera!!.cameraInfo).cameraId.compareTo(
                        Camera2CameraInfo.from(allCam2Infos[i]).cameraId
                    ) == 0
                ) {
                    // the camera in position i of the list is the curent camera
                    // just choose the next one - or if it is the last, switch to the first one
                    nextCameraId = if (i < allCam2Infos.size - 1) {
                        Camera2CameraInfo.from(allCam2Infos[i + 1]).cameraId
                    } else {
                        Camera2CameraInfo.from(allCam2Infos[0]).cameraId
                    }
                }
            }
             */
            var nextCameraId = Camera2CameraInfo.from(currentCamera!!.cameraInfo).cameraId
            nextCameraId = if (nextCameraId == "0"){
                "1"
            }else {
                "0"
            }
            println("fun switchCamera : nextCameraId = $nextCameraId")
            // create a filter in camera selector to choose the camera with the selected id
            CameraSelector.Builder()
                .addCameraFilter {
                    it.filter { camInfo ->
                        val thisCamId = Camera2CameraInfo.from(camInfo).cameraId
                        thisCamId == nextCameraId
                    }
                }.build()

            // rebind the usecases
            rebindCameraUseCases()
        }

    }

    private fun showPreview() {
        isShowingPreview = !isShowingPreview
        rebindCameraUseCases()
    }

    private fun rebindCameraUseCases() {
        if (!isShowingPreview) {
            try {
                // Unbind use cases before rebinding
                cameraProvider.unbindAll()

                // Bind use cases to camera
                if (cameraSelector != null) {
                    currentCamera = cameraProvider.bindToLifecycle(
                        this, cameraSelector, imageAnalyzer
                    )
                }
                viewBinding.showPreviewButton.setText(getString(R.string.show_preview))
            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed when removing preview", exc)
            }
        } else {
            try {
                // Unbind use cases before rebinding
                cameraProvider.unbindAll()

                // Bind use cases to camera
                if (cameraSelector != null) {
                    currentCamera = cameraProvider.bindToLifecycle(
                        this, cameraSelector, imagePreview, imageAnalyzer
                    )
                }
                viewBinding.showPreviewButton.setText(getString(R.string.stop_preview))
            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed when adding preview", exc)
            }
        }

        // set zoom (switchable through a button 3 values 0.0f 0.5f 1.0f
        // 0f so that it selects the wide angle lens
        // 0.5f for tha main lens
        // 1.0f for the telephoto
        // if there are no lenses on the phone the zoom will be performed digitally (I guess)
        currentCamera?.cameraControl?.setLinearZoom(currentLinearZoom)
    }

    @SuppressLint("UnsafeOptInUsageError")
    private fun selectExternalOrBestCamera(provider: ProcessCameraProvider): CameraSelector {

        val allCam2Infos = provider.availableCameraInfos
        for (camInfo in allCam2Infos) {
            Log.d(
                TAG, "Hardware level of camera : " +
                        Camera2CameraInfo.from(camInfo)
                            .getCameraCharacteristic(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL)
                            .toString()
            )
            val streamConfigurationMap = Camera2CameraInfo.from(camInfo)
                .getCameraCharacteristic(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP)
            if (streamConfigurationMap != null) {
                Log.d(
                    TAG,
                    "JPEG output sizes : " + streamConfigurationMap.getOutputSizes(ImageFormat.JPEG)
                        .contentToString()
                )
            }
        }

        val cam2Infos = provider.availableCameraInfos.map {
            Camera2CameraInfo.from(it)
        }.sortedByDescending {
            // HARDWARE_LEVEL is Int type, with the order of:
            // LEGACY < LIMITED < FULL < LEVEL_3 < EXTERNAL
            it.getCameraCharacteristic(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL)
        }

        return when {
            cam2Infos.isNotEmpty() -> {
                CameraSelector.Builder()
                    .addCameraFilter {
                        it.filter { camInfo ->
                            // cam2Infos[0] is either EXTERNAL or best built-in camera
                            val thisCamId = Camera2CameraInfo.from(camInfo).cameraId
                            thisCamId == cam2Infos[0].cameraId
                        }
                    }.build()
            }
            else -> CameraSelector.DEFAULT_BACK_CAMERA
        }
    }


    @SuppressLint("UnsafeOptInUsageError")
    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            // Used to bind the lifecycle of cameras to the lifecycle owner
            cameraProvider = cameraProviderFuture.get()

            // Preview --not necessarry to be used
            imagePreview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewBinding.viewFinder.surfaceProvider)
                }
            // Analysis - for streamming
            val analysisBuilder = ImageAnalysis.Builder()
            val ext: Camera2Interop.Extender<*> = Camera2Interop.Extender(analysisBuilder)

            //analysisBuilder.setTargetResolution(Size(1280, 720))
            //analysisBuilder.setTargetResolution(Size(1920, 1080))
            analysisBuilder.setTargetRotation(Surface.ROTATION_90)
            analysisBuilder.setTargetAspectRatio(AspectRatio.RATIO_16_9)
            //analysisBuilder.setTargetAspectRatio(AspectRatio.RATIO_4_3)
            analysisBuilder.setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
            // this format is for tensorflow models that are used in mobile
            //analysisBuilder.setOutputImageFormat(ImageAnalysis.OUTPUT_IMAGE_FORMAT_RGBA_8888)


            imageAnalyzer = analysisBuilder.build();

            imageAnalyzer.setAnalyzer(cameraExecutor, FrameStreamer { success, jpgbytes ->
                //Log.d(TAG, "Total frames analysed : $numOfFrames")
                //Log.d(TAG, "start time (nanno seconds) : $startCountFramesNanoSecs")
                //count frames for displaying fps
                if (numOfFrames == 0) {
                    startCountFrameMillSecs = System.currentTimeMillis()
                    numOfFrames += 1
                } else {
                    if (System.currentTimeMillis() - startCountFrameMillSecs >= (10 * 1000)) {
                        // every 10 seconds count fps and reset counter
                        val fps = numOfFrames / 10
                        numOfFrames = 0
                        // try to touch View of UI thread
                        this@MainActivity.runOnUiThread(java.lang.Runnable {
                            viewBinding.fpsTextview.setText("$fps")
                        })

                        Log.d(TAG, "fps: $fps")
                    } else {
                        numOfFrames += 1
                    }
                }

                // try sending
                if (success) {
                    connectionHandler.sendTCP(jpgbytes)
                }

            })

            // Select back camera as a default
            //val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA
            //val cameraSelector = CameraSelector.DEFAULT_FRONT_CAMERA
            // create a CameraSelector for the USB camera (or highest level internal camera)
            cameraSelector = selectExternalOrBestCamera(cameraProvider)
            rebindCameraUseCases()

        }, ContextCompat.getMainExecutor(this))

    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        displayManager.unregisterDisplayListener(displayListener)
        connectionHandler.destroySockets()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "StreamCam"
        private const val HIGH_QUALITY = true
        private const val FILENAME_FORMAT = "yyyy-MM-dd-HH-mm-ss-SSS"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS =
            mutableListOf(
                Manifest.permission.CAMERA,
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.INTERNET
            ).apply {
                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.P) {
                    add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                }
            }.toTypedArray()
        private const val UDP_PORT = 20001
        private const val TCP_PORT = 20002
    }
}

private class FrameStreamer(private val listener: StreamListener) : ImageAnalysis.Analyzer {


    private fun ByteBuffer.toByteArray(): ByteArray {
        rewind()    // Rewind the buffer to zero
        val data = ByteArray(remaining())
        get(data)   // Copy the buffer into a byte array
        return data // Return the byte array
    }

    @SuppressLint("UnsafeOptInUsageError")
    override fun analyze(image: ImageProxy) {

//        val buffer = image.planes[0].buffer
//        val data = buffer.toByteArray()
//        val pixels = data.map { it.toInt() and 0xFF }
//        val luma = pixels.average()

        // process ImageProxy to jpg
        val bitmap = BitmapUtils.getBitmap(image)
        //Convert bitmap to byte array
        val bos = ByteArrayOutputStream()
        if (bitmap != null) {
            bitmap.compress(Bitmap.CompressFormat.JPEG, 80, bos)
            val jpgdata = bos.toByteArray()
            //Log.d(TAG, "jpg image size : ${jpgdata.size} bytes")
            // return the data to main executor
            listener(true, jpgdata)
        } else {
            listener(false, "".toByteArray())
        }

        image.close()
    }

    companion object {
        private const val TAG = "FrameStreamer"
    }
}

